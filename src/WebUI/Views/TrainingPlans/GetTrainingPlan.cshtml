@model TrainingPlanViewModel

@{
    ViewBag.Title = "Training Plan";
}

@functions {
    public class ColorGenerator
    {
        private int _groupCount;
        private int _currentIndex;
        private const int DefaultMove = 124;

        public ColorGenerator(int groupCount)
        {
            _groupCount = groupCount;
            _currentIndex = 0;
        }

        public string NextColor()
        {
            var hue = (_currentIndex * 360.0 / _groupCount + DefaultMove) % 360;
            _currentIndex++;
            return HslToRgb(hue, 0.5, 0.75); // Saturation and Lightness can be adjusted
        }

        private string HslToRgb(double hue, double saturation, double lightness)
        {
            double chroma = (1 - Math.Abs(2 * lightness - 1)) * saturation;
            double x = chroma * (1 - Math.Abs((hue / 60.0) % 2 - 1));
            double m = lightness - chroma / 2;
            double r = 0, g = 0, b = 0;

            if (0 <= hue && hue < 60)
            {
                r = chroma;
                g = x;
            }
            else if (60 <= hue && hue < 120)
            {
                r = x;
                g = chroma;
            }
            else if (120 <= hue && hue < 180)
            {
                g = chroma;
                b = x;
            }
            else if (180 <= hue && hue < 240)
            {
                g = x;
                b = chroma;
            }
            else if (240 <= hue && hue < 300)
            {
                r = x;
                b = chroma;
            }
            else if (300 <= hue && hue < 360)
            {
                r = chroma;
                b = x;
            }

            r += m;
            g += m;
            b += m;

            return $"#{(int)(r * 255):X2}{(int)(g * 255):X2}{(int)(b * 255):X2}";
        }
    }
}

@{
    var groupColors = new Dictionary<Guid, string>();
    var colorGenerator = new ColorGenerator(10);

    string GetGroupColor(Guid groupId)
    {
        if (!groupColors.TryGetValue(groupId, out var color))
        {
            color = colorGenerator.NextColor();
            groupColors[groupId] = color;
        }
        return groupColors[groupId];
    }
}

<div class="container">
    <h2 class="text-center mb-3">@Model.Author.Username/@Model.Title</h2>

    <div class="mb-3">
        State: 
        @if (Model.IsPublic)
        {
            <span class="badge rounded-pill text-bg-primary">public</span>
        }
        else
        {
            <span class="badge rounded-pill text-bg-secondary">private</span>
        }
    </div>
    
    <div>
        Actions:
        @if (Model.Author.Username == User.Identity?.Name)
        {
            <a class="btn btn-primary me-2 mb-1" asp-controller="TrainingPlans" asp-action="Update" asp-route-author="@Model.Author.Username" asp-route-title="@Model.Title">Update</a>
            <a class="btn btn-danger  me-2 mb-1" asp-controller="TrainingPlans" asp-action="Delete" asp-route-author="@Model.Author.Username" asp-route-title="@Model.Title">Delete</a> // todo create modal to ask if really need to delete plan
        }
        
        <a class="btn btn-primary me-2 mb-1" asp-controller="TrainingPlans" asp-action="GetTrainingPlanAsPdf" asp-route-author="@Model.Author.Username" asp-route-title="@Model.Title">Download as PDF</a>
    </div>
    

    <div class="table-responsive border border-1 border-black">
        <table class="table table-bordered m-0" style="min-height: 60vh">
            <thead>
            <tr>
                @foreach (var block in Model.TrainingPlanBlocks)
                {
                    <th>@block.Name</th>
                }
            </tr>
            </thead>
            <tbody>
            @{
                var maxEntriesCount = Model.TrainingPlanBlocks.Any() ? Model.TrainingPlanBlocks.Max(b => b.TrainingPlanBlockEntries.Count) : 0;
            }
            @for (int i = 0; i < maxEntriesCount; i++)
            {
                <tr>
                    @foreach (var block in Model.TrainingPlanBlocks)
                    {
                        if (i < block.TrainingPlanBlockEntries.Count)
                        {
                            var entry = block.TrainingPlanBlockEntries[i];
                            var color = GetGroupColor(entry.Group.Id);
                            <td style="background-color: @color">
                                <div><strong>Group: </strong><a asp-controller="Exercises" asp-action="GetAllExercises" asp-route-f_group="@entry.Group.Id">@entry.Group.Name</a></div>
                                <div><strong>Description: </strong>@entry.Description</div>
                            </td>
                        }
                        else
                        {
                            <td>
                            
                            </td>
                        }
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>
