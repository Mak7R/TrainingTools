// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.DbContexts;

#nullable disable

namespace TrainingTools.Migrations
{
    [DbContext(typeof(TrainingToolsDbContext))]
    partial class TrainingToolsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Contracts.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Contracts.Models.ExerciseResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResultsJson")
                        .IsRequired()
                        .HasMaxLength(128000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ExerciseResults");
                });

            modelBuilder.Entity("Contracts.Models.FollowerRelationship", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FollowerRights")
                        .HasColumnType("int");

                    b.HasKey("WorkspaceId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("FollowerRelationships");
                });

            modelBuilder.Entity("Contracts.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Contracts.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Contracts.Models.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("Contracts.Models.Exercise", b =>
                {
                    b.HasOne("Contracts.Models.Group", "Group")
                        .WithMany("Exercises")
                        .HasForeignKey("GroupId");

                    b.HasOne("Contracts.Models.Workspace", "Workspace")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Contracts.Models.ExerciseResults", b =>
                {
                    b.HasOne("Contracts.Models.Exercise", "Exercise")
                        .WithMany("Results")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contracts.Models.User", "Owner")
                        .WithMany("UserResults")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Contracts.Models.FollowerRelationship", b =>
                {
                    b.HasOne("Contracts.Models.User", "Follower")
                        .WithMany("Follows")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contracts.Models.Workspace", "Workspace")
                        .WithMany("Followers")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Contracts.Models.Group", b =>
                {
                    b.HasOne("Contracts.Models.Workspace", "Workspace")
                        .WithMany("Groups")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Contracts.Models.Workspace", b =>
                {
                    b.HasOne("Contracts.Models.User", "Owner")
                        .WithMany("Workspaces")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Contracts.Models.Exercise", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Contracts.Models.Group", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Contracts.Models.User", b =>
                {
                    b.Navigation("Follows");

                    b.Navigation("UserResults");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Contracts.Models.Workspace", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Followers");

                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
