@page "/Profile"
@using TrainingTools.Models

@attribute [StreamRendering]

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider



@if (_errorMessage == string.Empty)
{
    <div class="container">
        <h3>Profile</h3>
        @if (_user == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <h4>ID: @_user.Id</h4>
            <h4>Email: @_user.Email</h4>
            <h4>Name: @_user.Name</h4>
        }
    </div>
}
else
{
    <h1>Load Error</h1>
    <h2>@_errorMessage</h2>
}

@code {
    private UserViewModel? _user;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = new HttpRequest(
                "http://localhost:5219/account/index",
                "GET",
                string.Empty);
            
            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);
            
            if (response.IsSuccessStatusCode)
            {
                _user = JsonSerializer.Deserialize<UserViewModel>(response.Content);
            }
            else
            {
                _errorMessage = JsonSerializer.Deserialize<ErrorModel>(response.Content)?.Message ?? throw new Exception("Unhandled error");
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }
}