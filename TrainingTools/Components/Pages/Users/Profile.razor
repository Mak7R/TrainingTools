@page "/profile"

@rendermode InteractiveServer

@inject IJSRuntime Js
@inject Linker Linker

<PageTitle>Profile @if (_user != null) { <text>: @_user?.Name</text> }</PageTitle>

<div class="container-fluid">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Profile</li>
    </ol>
</div>

<div class="container">
    <h2>Profile</h2>
    
    <div class="container">
        <h4>ID: 
            @if (_user == null)
            {
                <div class="placeholder col-5 placeholder-glow bg-secondary"></div>
            }
            else
            {
                <text>@_user.Id</text>
            }
        </h4>
        <h4>Email: 
            @if (_user == null)
            {
                <div class="placeholder col-5 placeholder-glow bg-secondary"></div>
            }
            else
            {
                <text>@_user.Email</text>
            }
        </h4>
        <h4>Name: 
            @if (_user == null)
            {
                <div class="placeholder col-4 placeholder-glow bg-secondary"></div>
            }
            else
            {
                <text>@_user.Name</text>
            }
        </h4>
    </div>
    
    <div class="container mt-2">
        <h3>Actions</h3>
        @if (_user == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <a href="@Linker.GetLocalPathByAction("Users.EditProfile", "Blazor")" class="btn btn-primary me-2">Edit</a>

            <button id="showChangePassDialog" onclick="new bootstrap.Modal('#changePasswordModal').show();" type="button" class="btn btn-primary">
                Change password
            </button>
            <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="changePasswordLabel">Change Password</h1>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="currentPassword">Current Password</label>
                                <input type="password" class="form-control" id="currentPassword" @bind="_changePasswordModel.CurrentPassword" required>
                                <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(ChangePasswordModel.CurrentPassword)"></InvalidModelFormMessage>
                            </div>
                            <div class="form-group">
                                <label for="newPassword">New Password</label>
                                <input type="password" class="form-control" id="newPassword" @bind="_changePasswordModel.NewPassword" required>
                                <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(ChangePasswordModel.NewPassword)"></InvalidModelFormMessage>
                            </div>
                            <div class="form-group">
                                <label for="confirmPassword">Confirm New Password</label>
                                <input type="password" class="form-control" id="confirmPassword" @bind="_confirmPassword" required>
                                <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="ConfirmPassword"></InvalidModelFormMessage>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button @onclick="OnChangePassword" class="btn btn-primary">Change</button>
                        </div>
                    </div>
                </div>
            </div>

            var componentId = Guid.NewGuid();
            <DeleteButtonComponent ComponentId="componentId"/>
            <DeleteWithPasswordComponent
                ComponentId="componentId"
                ModalTitle="Delete Account"
                OnSuccessRedirectUrl="@Linker.GetLocalPathByAction("Home", "Blazor")"
                HandlerUrl="@Linker.GetPathByAction("Delete", "Users")"/>
        }
    </div>
    <div class="container mt-2">
        <h3>Follows</h3>
        @if (_user == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            // TODO unfollowing
        }
    </div>
</div>

@code {
    private UserViewModel? _user;

    private string _confirmPassword = string.Empty;
    private readonly ChangePasswordModel _changePasswordModel = new()
    {
        CurrentPassword = string.Empty,
        NewPassword = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await (await Linker.RequestBuilder
                        .RequestToAction("Profile", "Users")
                        .WithMethod(HttpMethod.Get)
                        .WithCookies()
                        .Fetch())
                    .LoadCookies()
                    .OnSuccess(response =>
                    {
                        _user = JsonSerializer.Deserialize<UserViewModel>(response.Content);
                        StateHasChanged();
                    })
                    .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                    {
                        Linker.NavigateToAction("Users.Login");
                    })
                    .OnUnhandled(response =>
                    {
                        Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                    })
                    .WaitForHandleFinishedAsync();
                await Js.InvokeVoidAsync("clearModalsOnClose");
            }
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }

    private async Task OnChangePassword()
    {
        try
        {
            if (_changePasswordModel.NewPassword != _confirmPassword)
            {
                BindingError = new ModelStateErrorViewModel(
                    new Dictionary<string, IEnumerable<string>?>
                    {
                        { "ConfirmPassword", new[] { "Confirm password is not equal to new" } }
                    }
                );
                return;
            }
            
            await (await Linker.RequestBuilder
                    .RequestToAction("ChangePassword", "Users")
                    .WithMethod(HttpMethod.Patch)
                    .WithContent(_changePasswordModel)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(_ =>
                {
                    Linker.NavigationManager.Refresh(true);
                })
                .OnStatusCode(StatusCodes.Status400BadRequest, response =>
                {
                    BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                    StateHasChanged();
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                })
                .WaitForHandleFinishedAsync();
            await Js.InvokeVoidAsync("clearModalsOnClose");
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
}
