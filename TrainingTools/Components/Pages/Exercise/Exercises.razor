@page "/workspaces/{WorkspaceId:guid}/exercises"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

@if (_exercises == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container-fluid">
        <SearchBar FilterByOptions="ExercisesViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelper"/>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="col-4">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(ExerciseViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-4">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(ExerciseViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-2">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var exercise in _exercises)
                {
                    <tr>
                        <td>
                            @exercise.Id
                        </td>
                        <td>
                            <a href="/workspaces/exercises/@exercise.Id">@exercise.Name</a>
                        </td>
                        <td>
                            <a href="/workspaces/exercises/@exercise.Id/edit" class="btn btn-primary">Edit</a>
                            <DeleteModalComponent
                                ButtonName="Delete"
                                ModalTitle=@($"Delete exercise ({exercise.Name})")
                                OnSuccessRedirectUrl=@($"/workspaces/{exercise.Workspace.Id}/exercises")
                                HandlerUrl="@(
                                            NavigationManager.ToAbsoluteUri(
                                                LinkGenerator.GetPathByAction("Delete", "Exercises", new {exerciseId = exercise.Id}) 
                                                ?? throw new Exception("Uri was not found")).AbsoluteUri)"/>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <a href="/workspaces/@WorkspaceId/exercises/add" class="btn btn-success btn-block w-100">Add Exercise</a>
    </div>
}

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private IEnumerable<ExerciseViewModel>? _exercises;
    private readonly RequestCollectionsHelper _requestCollectionsHelper = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _requestCollectionsHelper.OnSet += RequestExercises;
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Index", "Exercises", new {workspaceId = WorkspaceId}) 
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "GET",
                string.Empty);
            
            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);
                
            if (response.IsSuccessStatusCode)
            {
                _exercises = JsonSerializer.Deserialize<List<ExerciseViewModel>>(response.Content);
                StateHasChanged();
            }
            else if (response.StatusCode == 401)
            {
                NavigationManager.NavigateTo("/login", true);
            }
        }
    }
    
    private async void RequestExercises(string query)
    {
        var request = new HttpRequest(
            $"{NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Index", "Exercises", new {workspaceId = WorkspaceId}) ?? throw new Exception("Uri was not found")).AbsoluteUri}?{query}",
            "GET",
            string.Empty);
            
        await CookiesProvider.ToRequest(request);
        var response = await FetchService.Fetch(request);
        await CookiesProvider.FromResponse(response);
                
        if (response.IsSuccessStatusCode)
        {
            _exercises = JsonSerializer.Deserialize<List<ExerciseViewModel>>(response.Content);
            StateHasChanged();
        }
        else if (response.StatusCode == 401)
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }
}