@page "/workspaces/exercises/{ExerciseId:guid}/edit"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Edit Exercise</PageTitle>

<div class="container">
    <h3>Edit Exercise</h3>
    
    @if (_groups == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="form-group mb-3">
            <label for="edit-exercise-name">Exercise name: </label>
            <input id="edit-exercise-name" @bind="_editExerciseModel.Name" class="form-control">
            <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(EditExerciseModel.Name)"></InvalidModelFormMessage>
        </div>

        <div class="form-group mb-3">
            <label for="edit-exercise-group">Group: </label>
            <select id="edit-exercise-group" class="form-select" @bind="_editExerciseModel.GroupId">
                <option value="">No Group</option>
                @foreach (var group in _groups)
                {
                    <option value="@group.Id">@group.Name</option>
                }
            </select>
            <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(EditExerciseModel.GroupId)"></InvalidModelFormMessage>
        </div>
    
        <a class="btn btn-primary" href="/workspaces/exercises/@ExerciseId">Exit from edit mode</a> 
        <button @onclick="OnEditClick" class="btn btn-success">Save changes</button>
    }
    
</div>


@code {

    [Parameter] public Guid ExerciseId { get; set; }
    
    private readonly EditExerciseModel _editExerciseModel = new()
    {
        Name = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }
    private IEnumerable<GroupViewModel>? _groups;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                Guid? workspaceId = null;
                {
                    var request = new HttpRequest(
                        NavigationManager.ToAbsoluteUri(
                            LinkGenerator.GetPathByAction("Get", "Exercises", new { exerciseId = ExerciseId })
                            ?? throw new Exception("Uri was not found")).AbsoluteUri,
                        "GET",
                        string.Empty);

                    await CookiesProvider.ToRequest(request);
                    var response = await FetchService.Fetch(request);
                    await CookiesProvider.FromResponse(response);

                    if (response.IsSuccessStatusCode)
                    {
                        var exercise = JsonSerializer.Deserialize<ExerciseViewModel>(response.Content);
                        if (exercise == null) throw new NullReferenceException("exercise was null");
                        workspaceId = exercise.Workspace.Id;
                        _editExerciseModel.Name = exercise.Name;
                        _editExerciseModel.GroupId = exercise.Group?.Id;
                        StateHasChanged();
                    }
                    else if (response.StatusCode == 401)
                    {
                        NavigationManager.NavigateTo("/login", true);
                    }
                    else
                    {
                        NavigationManager.NavigateTo($"/error/{response.StatusCode}");
                    }
                }

                if (workspaceId.HasValue)
                {
                    var request = new HttpRequest(
                        NavigationManager.ToAbsoluteUri(
                            LinkGenerator.GetPathByAction("Index", "Groups", new { workspaceId = workspaceId.Value })
                            ?? throw new Exception("Uri was not found")).AbsoluteUri,
                        "GET",
                        string.Empty);

                    await CookiesProvider.ToRequest(request);
                    var response = await FetchService.Fetch(request);
                    await CookiesProvider.FromResponse(response);

                    if (response.IsSuccessStatusCode)
                    {
                        _groups = JsonSerializer.Deserialize<List<GroupViewModel>>(response.Content);
                        StateHasChanged();
                    }
                    else if (response.StatusCode == 401)
                    {
                        NavigationManager.NavigateTo("/login", true);
                    }
                    else
                    {
                        NavigationManager.NavigateTo($"/error/{response.StatusCode}");
                    }
                }
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }

    private async Task OnEditClick()
    {
        try
        {
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Edit", "Exercises", new { exerciseId = ExerciseId })
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "PATCH",
                JsonSerializer.Serialize(_editExerciseModel));

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/workspaces/exercises/{ExerciseId}", true);
            }
            else if (response.StatusCode == StatusCodes.Status400BadRequest)
            {
                BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}