@page "/workspaces/{WorkspaceId:guid}/exercises/{ExerciseId:guid}"

@rendermode InteractiveServer

@inject Linker Linker

<PageTitle>Exercise @if(_exercise != null) { <text>: @_exercise.Name</text> }</PageTitle>

<div class="container-fluid">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.Workspaces", "Blazor")">Workspaces</a></li>
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.FullWorkspace", "Blazor", new {WorkspaceId})">@WorkspaceId</a></li>
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Exercises.Exercises", "Blazor", new {WorkspaceId})">Exercises</a></li>
        <li class="breadcrumb-item active" aria-current="page">@(_exercise?.Id ?? Guid.Empty)</li>
    </ol>
</div>

<div class="container">
    <div>
        <h3>Exercise</h3>
        <h4>ID:
            @if (_exercise != null)
            {
                <text>@_exercise.Id</text>
            }
            else
            {
                <div class="placeholder col-5 placeholder-glow bg-secondary"></div>
            }
        </h4>
        <h4>Name: 
            @if (_exercise != null)
            {
                <text>@_exercise.Name</text>
            }
            else
            {
                <div class="placeholder col-4 placeholder-glow bg-secondary"></div>
            }
        </h4>
        <h4>Group:
            @if (_exercise != null)
            {
                @if (_exercise.Group == null)
                {
                    <text>No Group</text>
                }
                else
                {
                    <text>@_exercise.Group.Name</text>
                }
            }
            else
            {
                <div class="placeholder col-4 placeholder-glow bg-secondary"></div>
            }

        </h4>
        <h4>Owner: 
            @if (_exercise != null)
            {
                @_exercise.Workspace.Owner.Name
            }
            else
            {
                <div class="placeholder col-4 placeholder-glow bg-secondary"></div>
            }
        </h4>
    </div>
    
    <div class="mb-4">
        <h3>Actions</h3>
        @if (_exercise == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            if (_exercise.Workspace.Permission.HasEditPermission())
            {
                <a href="@Linker.GetLocalPathByAction("Exercises.EditExercise", "Blazor", new {WorkspaceId, ExerciseId})" class="btn btn-primary">Edit</a>
                
                var componentId = Guid.NewGuid();
                <DeleteButtonComponent ComponentId="componentId"/>
                <DeleteModalComponent
                    ComponentId="componentId"
                    ModalTitle=@($"Delete exercise ({_exercise.Name})")
                    OnSuccessRedirectUrl=@Linker.GetLocalPathByAction("Exercises.Exercises", "Blazor", new {WorkspaceId})
                    HandlerUrl="@Linker.GetPathByAction("Delete", "Exercises", new {WorkspaceId, exerciseId = _exercise.Id})"/>
            }
            
            if (_exercise.Workspace.Permission.HasUsePermission())
            {
                <div class="mt-2">
                    @if(_exercise.Results == null){
                        <div>
                            <button class="btn btn-success" @onclick="AddResults">Add Results</button>
                        </div>
                    }
                    else
                    {
                        <div>
                            <button class="btn btn-danger" @onclick="DeleteResults">Delete Results</button>
                        </div>
                        <ResultsComponent WorkspaceId="@WorkspaceId" ExerciseResults="_exercise.Results"/>
                    }
                </div>
            }
        }
    </div>
    
    <div class="container">
        <h3>All Results</h3>
        
        @if (_exercise == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <div class="row row row-cols-1 row-cols-md-2 row-cols-lg-3">
                @foreach (var result in _exercise.AllResults)
                {
                    <div class="col">
                        <div class="card m-2">
                            <div class="card-body">
                                <h5 class="card-title"><a href="@Linker.GetLocalPathByAction("Users.PublicProfile", "Blazor", new { UserId = result.Owner.Id })">@result.Owner.Name</a></h5>

                                <table class="table table-striped table-hover">
                                    <thead>
                                    <tr>
                                        <th class="col-1">
                                            <span class="text-center d-block">Weight</span>
                                        </th>
                                        <th class="col-1">
                                            <span class="text-center d-block">Count</span>
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody id="edit-exercise-results-root">
                                    @foreach (var row in result.Results)
                                    {
                                        <tr>
                                            <td>
                                                @row.Weight
                                            </td>
                                            <td>
                                                @row.Count
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        </div>                        
                    </div>
                }
            </div>
        }
    </div>
</div>

@code{
    [Parameter] public Guid WorkspaceId { get; set; }
    [Parameter] public Guid ExerciseId { get; set; }
    private FullExerciseViewModel? _exercise;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await (await Linker.RequestBuilder
                        .RequestToAction("Get", "Exercises", new { WorkspaceId , ExerciseId })
                        .WithMethod(HttpMethod.Get)
                        .WithCookies()
                        .Fetch())
                    .LoadCookies()
                    .OnSuccess(response =>
                    {
                        _exercise = JsonSerializer.Deserialize<FullExerciseViewModel>(response.Content);
                        StateHasChanged();
                    })
                    .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                    {
                        Linker.NavigateToAction("Users.Login");
                    })
                    .OnUnhandled(response =>
                    {
                        Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                    })
                    .WaitForHandleFinishedAsync();
            }
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }

    private async Task AddResults()
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToAction("Add", "ExerciseResults", new { WorkspaceId, ExerciseId })
                    .WithMethod(HttpMethod.Post)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(_ =>
                {
                    Linker.NavigationManager.Refresh(true);
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new {response.StatusCode});
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
        
    private async Task DeleteResults()
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToAction("Delete", "ExerciseResults", new { WorkspaceId, resultsId = _exercise!.Results!.Id })
                    .WithMethod(HttpMethod.Delete)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(_ =>
                {
                    Linker.NavigationManager.Refresh(true);
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new {response.StatusCode});
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }    
}