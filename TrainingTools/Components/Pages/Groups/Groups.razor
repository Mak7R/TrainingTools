@page "/workspaces/{WorkspaceId:guid}/groups"

@rendermode InteractiveServer

@inject Linker Linker

<div class="container-fluid">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.Workspaces", "Blazor")">Workspaces</a></li>
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.FullWorkspace", "Blazor", new {WorkspaceId})">@WorkspaceId</a></li>
        <li class="breadcrumb-item active" aria-current="page">Groups</li>
    </ol>
</div>

<div class="container-fluid">
    <SearchBar FilterByOptions="GroupsViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelper"/>
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th class="col-4">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(GroupViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-4">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(GroupViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-2">
                Actions
            </th>
        </tr>
        </thead>
        <tbody>
        @if (_groups == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            @foreach (var group in _groups)
            {
                <tr>
                    <td>
                        @group.Id
                    </td>
                    <td>
                        <a href="@Linker.GetLocalPathByAction("Groups.Group", "Blazor", new {GroupId = group.Id})">@group.Name</a>
                    </td>
                    <td>
                        <a href="@Linker.GetLocalPathByAction("Groups.EditGroup", "Blazor", new {GroupId = group.Id})" class="btn btn-primary">Edit</a>
                        
                        @{ var componentId = Guid.NewGuid(); }
                        <DeleteButtonComponent ComponentId="componentId"/>
                        <DeleteModalComponent
                            ModalTitle=@($"Delete group ({group.Name})")
                            OnSuccessRedirectUrl="@Linker.GetLocalPathByAction("Groups.Groups", "Blazor", new {WorkspaceId})"
                            HandlerUrl="@Linker.GetLocalPathByAction("Delete", "Groups", new {groupId = group.Id})"/>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>

    <a href="@Linker.GetLocalPathByAction("Groups.AddGroup", "Blazor", new {WorkspaceId})" class="btn btn-success btn-block w-100">Add Group</a>
</div>

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private IEnumerable<GroupViewModel>? _groups;
    private readonly RequestCollectionsHelper _requestCollectionsHelper = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            _requestCollectionsHelper.OnSet += RequestGroups;
            if (firstRender)
            {
                await (await Linker.RequestBuilder
                        .RequestToAction("GetAll", "Groups", new { workspaceId = WorkspaceId })
                        .WithMethod(HttpMethod.Get)
                        .WithCookies()
                        .Fetch())
                    .LoadCookies()
                    .OnSuccess(response =>
                    {
                        _groups = JsonSerializer.Deserialize<List<GroupViewModel>>(response.Content);
                        StateHasChanged();
                    })
                    .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                    {
                        Linker.NavigateToAction("Users.Login");
                    })
                    .OnUnhandled(response =>
                    {
                        Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                    })
                    .WaitForHandleFinishedAsync();
            }
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
    
    private async void RequestGroups(string query)
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToUrl($"{Linker.GetPathByAction("GetAll", "Groups", new { workspaceId = WorkspaceId })}?{query}") // danger code !!! fix query system
                    .WithMethod(HttpMethod.Get)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(response =>
                {
                    _groups = JsonSerializer.Deserialize<List<GroupViewModel>>(response.Content);
                    StateHasChanged();
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
}