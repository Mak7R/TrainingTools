@page "/workspaces/{WorkspaceId:guid}/groups/add"

@rendermode InteractiveServer

@inject Linker Linker

<PageTitle>Add Group</PageTitle>

<div class="container-fluid">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.Workspaces", "Blazor")">Workspaces</a></li>
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.FullWorkspace", "Blazor", new {WorkspaceId})">@WorkspaceId</a></li>
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Groups.Groups", "Blazor", new {WorkspaceId})">Groups</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add Group</li>
    </ol>
</div>

<div class="container">
    <h3>Add Group</h3>
    
    <div class="form-group mb-3">
        <label for="add-group-name">Group name: </label>
        <input id="add-group-name" @bind="_addGroupModel.Name" class="form-control">
        <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(AddGroupModel.Name)"></InvalidModelFormMessage>
    </div>

    <button @onclick="OnAddClick" class="btn btn-primary">Add</button>
</div>

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private readonly AddGroupModel _addGroupModel = new()
    {
        Name = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }

    private async Task OnAddClick()
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToAction("Add", "Groups", new { WorkspaceId })
                    .WithMethod(HttpMethod.Post)
                    .WithContent(_addGroupModel)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(_ =>
                {
                    Linker.NavigateToAction("Groups.Groups", routeValues: new {WorkspaceId});
                })
                .OnStatusCode(StatusCodes.Status400BadRequest, response =>
                {
                    BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new {response.StatusCode});
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
}