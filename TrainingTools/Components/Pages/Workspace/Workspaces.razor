@page "/Workspaces"
@using TrainingTools.Models

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Workspaces</PageTitle>

<div class="container-fluid">
        <h3>Workspaces</h3>
        @if (_workspaces == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <SearchBar FilterByOptions="WorkspacesViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelper"/>
            <table class="table table-striped table-hover">
                <thead>
                <tr>
                    <th class="col-2">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(WorkspaceViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-2">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(WorkspaceViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-2">
                        Actions
                    </th>
                </tr>
                </thead>
                <tbody>
                @foreach(var workspace in _workspaces)
                {
                    <tr>
                        <td>
                            @workspace.Id
                        </td>
                        <td>
                            <a href="/workspaces/@workspace.Id">@workspace.Name</a>
                        </td>
                        <td>
                            <a class="btn btn-success" href="/workspaces/@workspace.Id/info">Info</a>
                            <a class="btn btn-success" href="/workspaces/@workspace.Id/exercises">Exercises</a>
                            <a class="btn btn-success" href="/workspaces/@workspace.Id/groups">Groups</a>
                            <a class="btn btn-primary" href="/workspaces/@workspace.Id/edit">Edit</a>
                            <DeleteWithPasswordComponent
                                ButtonName="Delete"
                                ModalTitle="@($"Delete workspace ({workspace.Name})")"
                                OnSuccessRedirectUrl="/workspaces"
                                HandlerUrl="@(NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Delete", "Workspaces", new { workspaceId = workspace.Id }) ?? throw new Exception("Uri was not found")).AbsoluteUri)">

                            </DeleteWithPasswordComponent>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <a href="/workspaces/add" class="btn btn-success btn-block w-100">Add Workspace</a>
        }
    </div>

@code {
    private IEnumerable<WorkspaceViewModel>? _workspaces;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _requestCollectionsHelper.OnSet += RequestWorkspaces;
            
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Index", "Workspaces") 
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "GET",
                string.Empty);
            
            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);
                
            if (response.IsSuccessStatusCode)
            {
                _workspaces = JsonSerializer.Deserialize<List<WorkspaceViewModel>>(response.Content);
                StateHasChanged();
            }
            else if (response.StatusCode == 401)
            {
                NavigationManager.NavigateTo("/login", true);
            }
            else
            {
                throw new Exception("Unhandled status");
            }
        }
    }

    private readonly RequestCollectionsHelper _requestCollectionsHelper = new();

    private async void RequestWorkspaces(string query)
    {
        var request = new HttpRequest(
             $"{NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Index", "Workspaces") ?? throw new Exception("Uri was not found")).AbsoluteUri}?{query}",
            "GET",
            string.Empty);
            
        await CookiesProvider.ToRequest(request);
        var response = await FetchService.Fetch(request);
        await CookiesProvider.FromResponse(response);
                
        if (response.IsSuccessStatusCode)
        {
            _workspaces = JsonSerializer.Deserialize<List<WorkspaceViewModel>>(response.Content);
            StateHasChanged();
        }
        else if (response.StatusCode == 401)
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }
}