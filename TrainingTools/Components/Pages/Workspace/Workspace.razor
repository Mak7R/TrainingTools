@page "/workspaces/{WorkspaceId:guid}/info"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Workspace @if(_workspace != null) { <text>: @_workspace.Name</text> }</PageTitle>

<div class="container">
    
    @if (_workspace == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div>
            <h3>Workspace</h3>
            <h4>ID: @_workspace.Id</h4>
            <h4>Name: @_workspace.Name</h4>
            <h4>Owner: @_workspace.Owner.Name</h4>
        </div>
        <div>
            <h3>Actions</h3>
            <a class="btn btn-success" href="/workspaces/@_workspace.Id/groups">Groups</a>
            <a class="btn btn-primary" href="/workspaces/@_workspace.Id/edit">Edit</a>
            <DeleteWithPasswordComponent
                ButtonName="Delete"
                ModalTitle=@($"Delete workspace ({_workspace.Name})")
                OnSuccessRedirectUrl="/workspaces"
                HandlerUrl="@(
                            NavigationManager.ToAbsoluteUri(
                                LinkGenerator.GetPathByAction("Delete", "Workspaces", new {workspaceId = _workspace.Id}) 
                                ?? throw new Exception("Uri was not found")).AbsoluteUri)">
                
            </DeleteWithPasswordComponent>
        </div>
    }
</div>

@code{
    [Parameter] public Guid WorkspaceId { get; set; }
    private WorkspaceViewModel? _workspace;
    private string _errorMessage = string.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var request = new HttpRequest(
                    NavigationManager.ToAbsoluteUri(
                        LinkGenerator.GetPathByAction("GetInfo", "Workspaces", new {workspaceId = WorkspaceId}) 
                        ?? throw new Exception("Uri was not found")).AbsoluteUri,
                    "GET",
                    string.Empty);
            
                await CookiesProvider.ToRequest(request);
                var response = await FetchService.Fetch(request);
                await CookiesProvider.FromResponse(response);
            
                if (response.IsSuccessStatusCode)
                {
                    _workspace = JsonSerializer.Deserialize<WorkspaceViewModel>(response.Content);
                    StateHasChanged();
                }
                else if(response.StatusCode == 401)
                {
                    NavigationManager.NavigateTo("/login", true);
                }
                else
                {
                    _errorMessage = JsonSerializer.Deserialize<ErrorViewModel>(response.Content)?.Message ?? throw new Exception("Unhandled error");
                }
            }
            catch (Exception e)
            {
                _errorMessage = e.Message;
            }
        }
    }
}