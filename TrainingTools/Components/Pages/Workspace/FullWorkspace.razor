@page "/workspaces/{WorkspaceId:guid}"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Workspace @if(_workspace != null) { <text>: @_workspace.Name</text> }</PageTitle>

<div class="container-fluid">
    @if (_workspace == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <SearchBar FilterByOptions="ExercisesViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelper"/>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="col-4">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(ExerciseViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-4">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(ExerciseViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-2">
                        Actions
                    </th>
                </tr>
            </thead>
        </table>

        <div class="accordion mb-2" id="exercises-by-groups">
            @foreach (var group in _workspace.Groups)
            {
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button
                            class="accordion-button p-2" type="button" data-bs-toggle="collapse"
                            data-bs-target="#panelsStayOpen-@group.Id" aria-expanded="true"
                            aria-controls="panelsStayOpen-@group.Id">
                            @group.Name
                        </button>
                    </h2>
                    <div id="panelsStayOpen-@group.Id" class="accordion-collapse collapse show">
                        <div class="accordion-body p-1">
                            <table class="table table-striped table-hover">
                                <tbody>
                                    @{ var exercises = _workspace.Exercises.Where(e => e.Group?.Id == group.Id); }
                                    @foreach (var exercise in exercises)
                                    {
                                        <tr>
                                            <td class="col-4">
                                                @exercise.Id
                                            </td>
                                            <td class="col-4">
                                                <a href="/workspaces/exercises/@exercise.Id">@exercise.Name</a>
                                            </td>
                                            <td class="col-2">
                                                <a href="/workspaces/exercises/@exercise.Id/edit" class="btn btn-primary">Edit</a>
                                                <DeleteModalComponent
                                                    ButtonName="Delete"
                                                    ModalTitle=@($"Delete exercise ({exercise.Name})")
                                                    OnSuccessRedirectUrl=@($"/workspaces/{exercise.Workspace.Id}/exercises")
                                                    HandlerUrl="@(NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Delete", "Exercises", new { exerciseId = exercise.Id }) ?? throw new Exception("Uri was not found")).AbsoluteUri)"/>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button
                        class="accordion-button p-2" type="button" data-bs-toggle="collapse"
                        data-bs-target="#panelsStayOpen-no-group" aria-expanded="true"
                        aria-controls="panelsStayOpen-no-group">
                        No Group
                    </button>
                </h2>
                <div id="panelsStayOpen-no-group" class="accordion-collapse collapse show">
                    <div class="accordion-body p-1">
                        <table class="table table-striped table-hover">
                            <tbody>
                                @{ var noGroupExercises = _workspace.Exercises.Where(e => e.Group == null); }
                                @foreach (var exercise in noGroupExercises)
                                {
                                    <tr>
                                        <td class="col-4">
                                            @exercise.Id
                                        </td>
                                        <td class="col-4">
                                            <a href="/workspaces/exercises/@exercise.Id">@exercise.Name</a>
                                        </td>
                                        <td class="col-2">
                                            <a href="/workspaces/exercises/@exercise.Id/edit" class="btn btn-primary">Edit</a>
                                            <DeleteModalComponent
                                                ButtonName="Delete"
                                                ModalTitle=@($"Delete exercise ({exercise.Name})")
                                                OnSuccessRedirectUrl=@($"/workspaces/{exercise.Workspace.Id}/exercises")
                                                HandlerUrl="@(NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Delete", "Exercises", new { exerciseId = exercise.Id }) ?? throw new Exception("Uri was not found")).AbsoluteUri)"/>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <a href="/workspaces/@WorkspaceId/groups/add" class="btn btn-success btn-block w-100 mb-2">Add Group</a>
        <a href="/workspaces/@WorkspaceId/exercises/add" class="btn btn-success btn-block w-100 mb-2">Add Exercise</a>
    }
</div>

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private FullWorkspaceViewModel? _workspace;
    private RequestCollectionsHelper _requestCollectionsHelper = new RequestCollectionsHelper();
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _requestCollectionsHelper.OnSet += RequestWorkspace;


                var request = new HttpRequest(
                    NavigationManager.ToAbsoluteUri(
                        LinkGenerator.GetPathByAction("Get", "Workspaces", new { workspaceId = WorkspaceId })
                        ?? throw new Exception("Uri was not found")).AbsoluteUri,
                    "GET",
                    string.Empty);

                await CookiesProvider.ToRequest(request);
                var response = await FetchService.Fetch(request);
                await CookiesProvider.FromResponse(response);

                if (response.IsSuccessStatusCode)
                {
                    _workspace = JsonSerializer.Deserialize<FullWorkspaceViewModel>(response.Content);
                    StateHasChanged();
                }
                else if (response.StatusCode == 401)
                {
                    NavigationManager.NavigateTo("/login", true);
                }
                else
                {
                    NavigationManager.NavigateTo($"/error/{response.StatusCode}");
                }
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
    
    private async void RequestWorkspace(string query)
    {
        try
        {
            var request = new HttpRequest(
                $"{NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Get", "Workspaces", new { workspaceId = WorkspaceId }) ?? throw new Exception("Uri was not found")).AbsoluteUri}?{query}",
                "GET",
                string.Empty);

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                _workspace = JsonSerializer.Deserialize<FullWorkspaceViewModel>(response.Content);
                StateHasChanged();
            }
            else if (response.StatusCode == 401)
            {
                NavigationManager.NavigateTo("/login", true);
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}