@page "/workspaces/add"

@rendermode InteractiveServer

@using TrainingTools.Models

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Add Workspace</PageTitle>

<div class="container">
    <h3>Add Workspace</h3>
    
    <div class="form-group mb-3">
        <label for="add-workspace-name">Workspace name: </label>
        <input id="add-workspace-name" @bind="_addWorkspaceModel.Name" class="form-control">
        <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(AddWorkspaceModel.Name)"></InvalidModelFormMessage>
    </div>

    <button @onclick="OnAddClick" class="btn btn-primary">Add</button>
</div>

@code {

    private readonly AddWorkspaceModel _addWorkspaceModel = new()
    {
        Name = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }

    private async Task OnAddClick()
    {
        var request = new HttpRequest(
            NavigationManager.ToAbsoluteUri(
                LinkGenerator.GetPathByAction("Add", "Workspaces") 
                ?? throw new Exception("Uri was not found")).AbsoluteUri,
            "POST",
            JsonSerializer.Serialize(_addWorkspaceModel));
            
        await CookiesProvider.ToRequest(request);
        var response = await FetchService.Fetch(request);
        await CookiesProvider.FromResponse(response);
            
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/workspaces", true);
        }
        else if (response.StatusCode == StatusCodes.Status400BadRequest)
        {
            BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
            StateHasChanged();
        }
        else
        {
            throw new Exception("Unhandled status");
        }
    }
}