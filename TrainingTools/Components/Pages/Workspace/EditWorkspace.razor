@page "/workspaces/{WorkspaceId:guid}/edit"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Edit Workspace</PageTitle>

<div class="container">
    <h3>Edit Workspace</h3>
    
    <div class="form-group mb-3">
        <label for="edit-workspace-name">Workspace name: </label>
        <input id="edit-workspace-name" @bind="_editWorkspaceModel.Name" class="form-control">
        <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(EditWorkspaceModel.Name)"></InvalidModelFormMessage>
    </div>

    <a class="btn btn-primary" href="/workspaces/@WorkspaceId/info">Exit from edit mode</a> 
    <button @onclick="OnEditClick" class="btn btn-success">Save changes</button>
</div>


@code {

    [Parameter] public Guid WorkspaceId { get; set; }
    
    private readonly EditWorkspaceModel _editWorkspaceModel = new()
    {
        Name = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("GetInfo", "Workspaces", new {workspaceId = WorkspaceId}) 
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "GET",
                string.Empty);
            
            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);
            
            if (response.IsSuccessStatusCode)
            {
                var workspace = JsonSerializer.Deserialize<WorkspaceViewModel>(response.Content);
                if (workspace == null) throw new NullReferenceException("workspace was null");
                _editWorkspaceModel.Name = workspace.Name;
                StateHasChanged();
            }
            else if(response.StatusCode == 401)
            {
                NavigationManager.NavigateTo("/login", true);
            }
        }
    }

    private async Task OnEditClick()
    {
        var request = new HttpRequest(
            NavigationManager.ToAbsoluteUri(
                LinkGenerator.GetPathByAction("Edit", "Workspaces", new {workspaceId = WorkspaceId}) 
                ?? throw new Exception("Uri was not found")).AbsoluteUri,
            "PATCH",
            JsonSerializer.Serialize(_editWorkspaceModel));
            
        await CookiesProvider.ToRequest(request);
        var response = await FetchService.Fetch(request);
        await CookiesProvider.FromResponse(response);
            
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/workspaces/{WorkspaceId}/info", true);
        }
        else if (response.StatusCode == StatusCodes.Status400BadRequest)
        {
            BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
            StateHasChanged();
        }
        else
        {
            throw new Exception("Unhandled status");
        }
    }
}