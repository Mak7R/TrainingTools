@using TrainingTools.Models

@page "/Register"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager

<div class="container">
    <div id="register-form">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        
        <div class="form-group mb-3">
            <label for="register-name" class="control-label">Name: </label>
            <input id="register-name" name="Name" type="text" class="form-control" @bind="_registerName" required>
            <span class="text-danger"></span>
        </div>
        <div class="form-group mb-3">
            <label for="register-email" class="control-label">Email: </label>
            <input id="register-email" name="Email" type="email" class="form-control" @bind="_registerEmail" required>
            <span class="text-danger"></span>
        </div>
        <div class="form-group mb-3">
            <label for="register-password" class="control-label">Password: </label>
            <input id="register-password" name="Password" type="password" class="form-control" @bind="_registerPassword" required>
            <span class="text-danger"></span>
        </div>
        <div class="form-group mb-3">
            <label for="register-confirm-password" class="control-label">Confirm password: </label>
            <input id="register-confirm-password" name="ConfirmPassword" type="password" class="form-control" @bind="_registerConfirmPassword" required>
            <span class="text-danger"></span>
        </div>
        
        <div class="form-group">
            <button class="btn btn-primary" @onclick="SubmitRegister" disabled="@_isSubmitted">Register</button>
        </div>
    </div>
</div>

@code {
    private string _registerName = string.Empty;
    private string _registerEmail = string.Empty;
    private string _registerPassword = string.Empty;
    private string _registerConfirmPassword = string.Empty;

    private bool _isSubmitted = false;

    private async Task SubmitRegister()
    {
        if (_isSubmitted) return;
        _isSubmitted = true;
        
        try
        {
            var registerModel = new RegisterUserModel
            {
                Name = _registerName,
                Email = _registerEmail,
                Password = _registerPassword,
                ConfirmPassword = _registerConfirmPassword
            };

            var request = new HttpRequest(
                "http://localhost:5219/account/register",
                "POST",
                JsonSerializer.Serialize(registerModel));
            
            await CookiesProvider.ToRequest(request);
            
            var response = await FetchService.Fetch(request);
    
            await CookiesProvider.FromResponse(response);
            
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception e)
        {
            // ignore
        }
        finally
        {
            _isSubmitted = false;
        }
    }
}