@page "/Login"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Login</PageTitle>

<div class="container">
    <div id="login-form">
        <div class="form-group mb-3">
            <label for="login-email" class="control-label">Email: </label>
            <input id="login-email" type="email" class="form-control" @bind="_loginUserModel.Email" required>
            <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(LoginUserModel.Email)" />
        </div>

        <div class="form-group mb-3">
            <label for="login-password" class="control-label">Password: </label>
            <input id="login-password" type="password" class="form-control" @bind="_loginUserModel.Password" required>
            <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(LoginUserModel.Password)" />
        </div>

        <div>
            <button class="btn btn-primary" @onclick="SubmitLogin">Login</button>
        </div>
    </div>
</div>

@code {
    private readonly LoginUserModel _loginUserModel = new()
    {
        Email = string.Empty,
        Password = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }

    private async Task SubmitLogin()
    {
        try
        {
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Login", "Users")
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "POST",
                JsonSerializer.Serialize(_loginUserModel));

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/", true);
            }
            else if (response.StatusCode == StatusCodes.Status400BadRequest)
            {
                BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                StateHasChanged();
            }
            else if (response.StatusCode == StatusCodes.Status404NotFound)
            {
                BindingError = new ModelStateErrorViewModel(
                    new Dictionary<string, IEnumerable<string>?>
                    {
                        { nameof(LoginUserModel.Email), new[] { "User with this email was not found" } }
                    }
                );
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}