@using TrainingTools.Models

@page "/Login"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<div class="container">
    <div id="login-form">
        <div class="form-group mb-3">
            <label for="login-email" class="control-label">Email: </label>
            <input id="login-email" name="email" type="email" class="form-control" @bind="_email" required>
            <span class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label for="login-password" class="control-label">Password: </label>
            <input id="login-password" name="password" type="password" class="form-control" @bind="_password" required>
            <span class="text-danger"></span>
        </div>

        <div>
            <button class="btn btn-primary" @onclick="SubmitLogin">Login</button>
        </div>
    </div>
</div>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;

    private bool _isSubmitted = false;

    private async Task SubmitLogin()
    {
        if (_isSubmitted) return;
        _isSubmitted = true;
        
        try
        {
            var loginUserModel = new LoginUserModel
            {
                Email = _email,
                Password = _password
            };

            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Login", "Users") 
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "POST",
                JsonSerializer.Serialize(loginUserModel));
            
            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);
            
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/", true);
            }
        }
        catch (Exception e)
        {
            // ignore
        }
        finally
        {
            _isSubmitted = false;
        }
    }
}