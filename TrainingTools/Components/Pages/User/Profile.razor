@page "/Profile"

@rendermode InteractiveServer


@inject NavigationManager NavigationManager
@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject LinkGenerator LinkGenerator
@inject IJSRuntime Js

<PageTitle>Profile @if (_user != null) { <text>: @_user?.Name</text> }</PageTitle>

<div class="container">
    <h2>Profile</h2>
    @if (_user == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="container">
            <h4>ID: @_user.Id</h4>
            <h4>Email: @_user.Email</h4>
            <h4>Name: @_user.Name</h4>
        </div>

        <div class="container mt-2">
            <h3>Actions</h3>
            <a href="/EditProfile" class="btn btn-primary">Edit</a>

            <button id="showChangePassDialog" onclick="new bootstrap.Modal('#changePasswordModal').show();" type="button" class="btn btn-primary">
                Change password
            </button>
            <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="changePasswordLabel">Change Password</h1>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="currentPassword">Current Password</label>
                                <input type="password" class="form-control" id="currentPassword" @bind="_changePasswordModel.CurrentPassword" required>
                                <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(ChangePasswordModel.CurrentPassword)"></InvalidModelFormMessage>
                            </div>
                            <div class="form-group">
                                <label for="newPassword">New Password</label>
                                <input type="password" class="form-control" id="newPassword" @bind="_changePasswordModel.NewPassword" required>
                                <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(ChangePasswordModel.NewPassword)"></InvalidModelFormMessage>
                            </div>
                            <div class="form-group">
                                <label for="confirmPassword">Confirm New Password</label>
                                <input type="password" class="form-control" id="confirmPassword" @bind="_confirmPassword" required>
                                <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="ConfirmPassword"></InvalidModelFormMessage>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button @onclick="OnChangePassword" class="btn btn-primary">Change</button>
                        </div>
                    </div>
                </div>
            </div>

            <DeleteWithPasswordComponent
                ButtonName="Delete"
                ModalTitle="Delete Account"
                HandlerUrl="@(NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Delete", "Users") ?? throw new Exception("Uri was not found")).AbsoluteUri)">
                
            </DeleteWithPasswordComponent>
        </div>
    }
</div>

@code {
    private UserViewModel? _user;

    private string _confirmPassword = string.Empty;
    private readonly ChangePasswordModel _changePasswordModel = new()
    {
        CurrentPassword = string.Empty,
        NewPassword = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var request = new HttpRequest(
                    NavigationManager.ToAbsoluteUri(
                        LinkGenerator.GetPathByAction("Index", "Users")
                        ?? throw new Exception("Uri was not found")).AbsoluteUri,
                    "GET",
                    string.Empty);

                await CookiesProvider.ToRequest(request);
                var response = await FetchService.Fetch(request);
                await CookiesProvider.FromResponse(response);

                if (response.IsSuccessStatusCode)
                {
                    _user = JsonSerializer.Deserialize<UserViewModel>(response.Content);
                    StateHasChanged();
                }
                else if (response.StatusCode == 401)
                {
                    NavigationManager.NavigateTo("/login", true);
                }
                else
                {
                    NavigationManager.NavigateTo($"/error/{response.StatusCode}");
                } 

                await Js.InvokeVoidAsync("clearModalsOnClose");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }

    private async Task OnChangePassword()
    {
        try
        {
            if (_changePasswordModel.NewPassword != _confirmPassword)
            {
                BindingError = new ModelStateErrorViewModel(
                    new Dictionary<string, IEnumerable<string>?>
                    {
                        { "ConfirmPassword", new[] { "Confirm password is not equal to new" } }
                    }
                );
                return;
            }

            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("ChangePassword", "Users")
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "PATCH",
                JsonSerializer.Serialize(_changePasswordModel));

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/", true);
            }
            else if (response.StatusCode == StatusCodes.Status400BadRequest)
            {
                BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}
