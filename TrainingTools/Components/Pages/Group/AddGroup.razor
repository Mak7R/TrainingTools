@page "/workspaces/{WorkspaceId:guid}/groups/add"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Add Group</PageTitle>

<div class="container">
    <h3>Add Group</h3>
    
    <div class="form-group mb-3">
        <label for="add-group-name">Group name: </label>
        <input id="add-group-name" @bind="_addGroupModel.Name" class="form-control">
        <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(AddGroupModel.Name)"></InvalidModelFormMessage>
    </div>

    <button @onclick="OnAddClick" class="btn btn-primary">Add</button>
</div>

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private readonly AddGroupModel _addGroupModel = new()
    {
        Name = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }

    private async Task OnAddClick()
    {
        try
        {
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Add", "Groups", new { workspaceId = WorkspaceId })
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "POST",
                JsonSerializer.Serialize(_addGroupModel));

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/workspaces/{WorkspaceId}/groups", true);
            }
            else if (response.StatusCode == StatusCodes.Status400BadRequest)
            {
                BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}