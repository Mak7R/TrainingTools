@page "/workspaces/{WorkspaceId:guid}/groups"
@using TrainingTools.Models

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

@if (_groups == null)
{
    
}
else
{
    <div class="container-fluid">
        <SearchBar FilterByOptions="GroupsViewCollectionBuilder.FilterByOptions" OnSearch="OnSearchBarButtonClicked"/>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="col-4">
                        Id
                    </th>
                    <th class="col-4">
                        Name
                    </th>
                    <th class="col-2">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in _groups)
                {
                    <tr>
                        <td>
                            @group.Id
                        </td>
                        <td>
                            <a href="/workspaces/groups/@group.Id">@group.Name</a>
                        </td>
                        <td>
                            <a href="/workspaces/groups/@group.Id/edit" class="btn btn-primary">Edit</a>
                            <DeleteModalComponent
                                ButtonName="Delete"
                                ModalTitle=@($"Delete group ({group.Name})")
                                OnSuccessRedirectUrl=@($"/workspaces/{group.Workspace.Id}/groups")
                                HandlerUrl="@(
                                            NavigationManager.ToAbsoluteUri(
                                                LinkGenerator.GetPathByAction("Delete", "Groups", new {groupId = group.Id}) 
                                                ?? throw new Exception("Uri was not found")).AbsoluteUri)"/>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <a href="/workspaces/@WorkspaceId/groups/add" class="btn btn-success btn-block w-100">Add Group</a>
    </div>
}

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private IEnumerable<GroupViewModel>? _groups;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Index", "Groups", new {workspaceId = WorkspaceId}) 
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "GET",
                string.Empty);
            
            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);
                
            if (response.IsSuccessStatusCode)
            {
                _groups = JsonSerializer.Deserialize<List<GroupViewModel>>(response.Content);
                StateHasChanged();
            }
            else if (response.StatusCode == 401)
            {
                NavigationManager.NavigateTo("/login", true);
            }
        }
    }
    
    private async Task OnSearchBarButtonClicked(FilterModel filter)
    {
        var request = new HttpRequest(
            NavigationManager.ToAbsoluteUri(
                LinkGenerator.GetPathByAction("Index", "Groups", new {workspaceId = WorkspaceId, filter.FilterBy, filter.FilterValue}) 
                ?? throw new Exception("Uri was not found")).AbsoluteUri,
            "GET",
            string.Empty);
            
        await CookiesProvider.ToRequest(request);
        var response = await FetchService.Fetch(request);
        await CookiesProvider.FromResponse(response);
                
        if (response.IsSuccessStatusCode)
        {
            _groups = JsonSerializer.Deserialize<List<GroupViewModel>>(response.Content);
            StateHasChanged();
        }
        else if (response.StatusCode == 401)
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }
}