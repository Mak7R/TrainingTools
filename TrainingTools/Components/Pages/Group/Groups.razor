@page "/workspaces/{WorkspaceId:guid}/groups"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

@if (_groups == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container-fluid">
        <SearchBar FilterByOptions="GroupsViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelper"/>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="col-4">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(GroupViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-4">
                        <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(GroupViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
                    </th>
                    <th class="col-2">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in _groups)
                {
                    <tr>
                        <td>
                            @group.Id
                        </td>
                        <td>
                            <a href="/workspaces/groups/@group.Id">@group.Name</a>
                        </td>
                        <td>
                            <a href="/workspaces/groups/@group.Id/edit" class="btn btn-primary">Edit</a>
                            <DeleteModalComponent
                                ButtonName="Delete"
                                ModalTitle=@($"Delete group ({group.Name})")
                                OnSuccessRedirectUrl=@($"/workspaces/{group.Workspace.Id}/groups")
                                HandlerUrl="@(
                                            NavigationManager.ToAbsoluteUri(
                                                LinkGenerator.GetPathByAction("Delete", "Groups", new {groupId = group.Id}) 
                                                ?? throw new Exception("Uri was not found")).AbsoluteUri)"/>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <a href="/workspaces/@WorkspaceId/groups/add" class="btn btn-success btn-block w-100">Add Group</a>
    </div>
}

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private IEnumerable<GroupViewModel>? _groups;
    private readonly RequestCollectionsHelper _requestCollectionsHelper = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            _requestCollectionsHelper.OnSet += RequestGroups;
            if (firstRender)
            {
                var request = new HttpRequest(
                    NavigationManager.ToAbsoluteUri(
                        LinkGenerator.GetPathByAction("Index", "Groups", new { workspaceId = WorkspaceId })
                        ?? throw new Exception("Uri was not found")).AbsoluteUri,
                    "GET",
                    string.Empty);

                await CookiesProvider.ToRequest(request);
                var response = await FetchService.Fetch(request);
                await CookiesProvider.FromResponse(response);

                if (response.IsSuccessStatusCode)
                {
                    _groups = JsonSerializer.Deserialize<List<GroupViewModel>>(response.Content);
                    StateHasChanged();
                }
                else if (response.StatusCode == 401)
                {
                    NavigationManager.NavigateTo("/login", true);
                }
                else
                {
                    NavigationManager.NavigateTo($"/error/{response.StatusCode}");
                }
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
    
    private async void RequestGroups(string query)
    {
        try
        {
            var request = new HttpRequest(
                $"{NavigationManager.ToAbsoluteUri(LinkGenerator.GetPathByAction("Index", "Groups", new { workspaceId = WorkspaceId }) ?? throw new Exception("Uri was not found")).AbsoluteUri}?{query}",
                "GET",
                string.Empty);

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                _groups = JsonSerializer.Deserialize<List<GroupViewModel>>(response.Content);
                StateHasChanged();
            }
            else if (response.StatusCode == 401)
            {
                NavigationManager.NavigateTo("/login", true);
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}