@page "/workspaces/groups/{GroupId:guid}/edit"

@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject LinkGenerator LinkGenerator

<PageTitle>Edit Group</PageTitle>

<div class="container">
    <h3>Edit Group</h3>
    
    <div class="form-group mb-3">
        <label for="edit-group-name">Group name: </label>
        <input id="edit-group-name" @bind="_editGroupModel.Name" class="form-control">
        <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(EditGroupModel.Name)"></InvalidModelFormMessage>
    </div>

    <a class="btn btn-primary" href="/workspaces/groups/@GroupId">Exit from edit mode</a> 
    <button @onclick="OnEditClick" class="btn btn-success">Save changes</button>
</div>


@code {

    [Parameter] public Guid GroupId { get; set; }
    
    private readonly EditGroupModel _editGroupModel = new()
    {
        Name = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var request = new HttpRequest(
                    NavigationManager.ToAbsoluteUri(
                        LinkGenerator.GetPathByAction("Get", "Groups", new { groupId = GroupId })
                        ?? throw new Exception("Uri was not found")).AbsoluteUri,
                    "GET",
                    string.Empty);

                await CookiesProvider.ToRequest(request);
                var response = await FetchService.Fetch(request);
                await CookiesProvider.FromResponse(response);

                if (response.IsSuccessStatusCode)
                {
                    var group = JsonSerializer.Deserialize<GroupViewModel>(response.Content);
                    if (group == null) throw new NullReferenceException("group was null");
                    _editGroupModel.Name = group.Name;
                    StateHasChanged();
                }
                else if (response.StatusCode == 401)
                {
                    NavigationManager.NavigateTo("/login", true);
                }
                else
                {
                    NavigationManager.NavigateTo($"/error/{response.StatusCode}");
                }
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }

    private async Task OnEditClick()
    {
        try
        {
            var request = new HttpRequest(
                NavigationManager.ToAbsoluteUri(
                    LinkGenerator.GetPathByAction("Edit", "Groups", new { groupId = GroupId })
                    ?? throw new Exception("Uri was not found")).AbsoluteUri,
                "PATCH",
                JsonSerializer.Serialize(_editGroupModel));

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/workspaces/groups/{GroupId}", true);
            }
            else if (response.StatusCode == StatusCodes.Status400BadRequest)
            {
                BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}