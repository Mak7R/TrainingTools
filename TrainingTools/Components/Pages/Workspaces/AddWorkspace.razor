@page "/workspaces/add"

@rendermode InteractiveServer

@inject Linker Linker

<PageTitle>Add Workspace</PageTitle>

<div class="container-fluid">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.Workspaces", "Blazor")">Workspaces</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add Workspace</li>
    </ol>
</div>

<div class="container">
    <h3>Add Workspace</h3>
    
    <div class="form-group mb-3">
        <label for="add-workspace-name">Workspace name: </label>
        <input id="add-workspace-name" @bind="_addWorkspaceModel.Name" class="form-control">
        <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(AddWorkspaceModel.Name)"></InvalidModelFormMessage>
    </div>

    <button @onclick="OnAddClick" class="btn btn-primary">Add</button>
</div>

@code {

    private readonly AddWorkspaceModel _addWorkspaceModel = new()
    {
        Name = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }

    private async Task OnAddClick()
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToAction("Add", "Workspaces")
                    .WithMethod(HttpMethod.Post)
                    .WithContent(_addWorkspaceModel)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(_ =>
                {
                    Linker.NavigateToAction("Workspaces.Workspaces");
                    StateHasChanged();
                })
                .OnStatusCode(StatusCodes.Status400BadRequest, response =>
                {
                    BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                    StateHasChanged();
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
}