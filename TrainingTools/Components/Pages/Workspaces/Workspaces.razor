@page "/Workspaces"
@using Contracts.Enums

@rendermode InteractiveServer

@inject Linker Linker

<PageTitle>Workspaces</PageTitle>

<div class="container-fluid">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Workspaces</li>
    </ol>
</div>

<div class="container mb-4">
    <h3>Own workspaces</h3>
    
    <SearchBar FilterByOptions="WorkspacesViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelper"/>
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th class="col-2">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(WorkspaceViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-2">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(WorkspaceViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-2">
                Actions
            </th>
        </tr>
        </thead>
                
        @if (_workspaces == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <tbody>
            @foreach(var workspace in _workspaces)
            {
                <tr>
                    <td>
                        <div>@workspace.Id</div>
                    </td>
                    <td>
                        <a href="@Linker.GetLocalPathByAction("Workspaces.FullWorkspace", "Blazor", new {WorkspaceId = workspace.Id})">@workspace.Name</a>
                    </td>
                    <td>
                        @{ var componentId = Guid.NewGuid(); }
                        <div id="buttonsCarousel-@workspace.Id" class="carousel carousel-fade btn-group">
                            <button class="btn btn-outline-primary" type="button" data-bs-target="#buttonsCarousel-@workspace.Id" data-bs-slide="prev">Prev</button>
                            <div class="carousel-inner">
                                <div class="carousel-item active btn-carousel-item-container">
                                    <a class="btn btn-primary" href="@Linker.GetLocalPathByAction("Workspaces.Workspace", "Blazor", new { WorkspaceId = workspace.Id })">Info</a>
                                </div>
                                <div class="carousel-item btn-carousel-item-container">
                                    <a class="btn btn-primary" href="@Linker.GetLocalPathByAction("Workspaces.Followers", "Blazor", new { WorkspaceId = workspace.Id })">Followers</a>
                                </div>
                                    
                                <div class="carousel-item btn-carousel-item-container">
                                    <a class="btn btn-success" href="@Linker.GetLocalPathByAction("Exercises.Exercises", "Blazor", new { WorkspaceId = workspace.Id })">Exercises</a>
                                </div>
                                <div class="carousel-item btn-carousel-item-container">
                                    <a class="btn btn-success" href="@Linker.GetLocalPathByAction("Groups.Groups", "Blazor", new { WorkspaceId = workspace.Id })">Groups</a>
                                </div>
                                <div class="carousel-item btn-carousel-item-container">
                                    <a class="btn btn-primary" href="@Linker.GetLocalPathByAction("Workspaces.EditWorkspace", "Blazor", new { WorkspaceId = workspace.Id })">Edit</a>
                                </div>
                                <div class="carousel-item btn-carousel-item-container">
                                    <DeleteButtonComponent ComponentId="componentId"/>
                                </div>
                            </div>
                            <button class="btn btn-outline-primary" type="button" data-bs-target="#buttonsCarousel-@workspace.Id" data-bs-slide="next">Next</button>
                        </div>
                        
                        <DeleteWithPasswordComponent
                            ComponentId="componentId"
                            ModalTitle=@($"Delete workspace ({workspace.Name})")
                            OnSuccessRedirectUrl="@Linker.GetLocalPathByAction("Workspaces.Workspaces", "Blazor")"
                            HandlerUrl="@Linker.GetPathByAction("Delete", "Workspaces", new { workspaceId = workspace.Id })"/>
                    </td>
                </tr>
            }
            </tbody>
        }
    </table>
    <a href="@Linker.GetLocalPathByAction("Workspaces.AddWorkspace", "Blazor")" class="btn btn-success btn-block w-100">Add Workspace</a>
</div>

<div class="container">
    <h3>Public workspaces</h3>

    <SearchBar FilterByOptions="PublicWorkspacesViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelperForPublicWorkspaces"/>
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th class="col-2">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelperForPublicWorkspaces" Value="@nameof(PublicWorkspaceViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-2">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelperForPublicWorkspaces" Value="@nameof(PublicWorkspaceViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-2">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelperForPublicWorkspaces" Value="@nameof(PublicWorkspaceViewModel.Owner)" Display="Owner" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-2">
                Actions
            </th>
        </tr>
        </thead>
                    
        @if (_publicWorkspaces == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <tbody>
            @foreach(var workspace in _publicWorkspaces)
            {
                <tr>
                    <td>
                        <div>@workspace.Id</div>
                    </td>
                    <td>
                        <a href="@Linker.GetLocalPathByAction("Workspaces.PublicWorkspace", "Blazor", new {WorkspaceId = workspace.Id})">@workspace.Name</a>
                    </td>
                    <td>
                        <a href="@Linker.GetLocalPathByAction("Users.PublicProfile", "Blazor", new {UserId = workspace.Owner.Id})">@workspace.Owner.Name</a>
                    </td>
                    <td>
                        @if (workspace.Permission == WorkspacePermission.Unauthorized)
                        {
                            
                        }
                        else if (workspace.Permission == WorkspacePermission.PermissionDenied)
                        {
                            <button class="btn btn-primary" @onclick="@(() => Follow(workspace.Id))">Follow</button>
                        }
                        else
                        {
                            <div id="buttonsCarousel-@workspace.Id" class="carousel carousel-fade btn-group">
                                <button class="btn btn-outline-primary" type="button" data-bs-target="#buttonsCarousel-@workspace.Id" data-bs-slide="prev">Prev</button>
                                <div class="carousel-inner">
                                    @if (workspace.Permission.HasViewPermission())
                                    {
                                        <div class="carousel-item active btn-carousel-item-container">
                                            <a class="btn btn-primary" href="@Linker.GetLocalPathByAction("Workspaces.Workspace", "Blazor", new { WorkspaceId = workspace.Id })">Info</a>
                                        </div>
                                        <div class="carousel-item btn-carousel-item-container">
                                            <a class="btn btn-success" href="@Linker.GetLocalPathByAction("Workspaces.FullWorkspace", "Blazor", new {WorkspaceId = workspace.Id})">Workspace</a>
                                        </div>
                                        <div class="carousel-item btn-carousel-item-container">
                                            <a class="btn btn-success" href="@Linker.GetLocalPathByAction("Exercises.Exercises", "Blazor", new {WorkspaceId = workspace.Id})">Exercises</a>
                                        </div>
                                        
                                        <div class="carousel-item btn-carousel-item-container">
                                            <a class="btn btn-success" href="@Linker.GetLocalPathByAction("Groups.Groups", "Blazor", new {WorkspaceId = workspace.Id})">Groups</a>
                                        </div>
                                    }
                            
                                    @if (workspace.Permission.HasEditPermission())
                                    {
                                        <div class="carousel-item btn-carousel-item-container">
                                            <a class="btn btn-primary" href="@Linker.GetLocalPathByAction("Workspaces.EditWorkspace", "Blazor", new {WorkspaceId = workspace.Id})">Edit</a>
                                        </div>
                                    }
                                </div>
                                
                                <button class="btn btn-outline-primary" type="button" data-bs-target="#buttonsCarousel-@workspace.Id" data-bs-slide="next">Next</button>
                            </div>
                            
                            <button class="btn btn-primary" disabled>Followed</button>
                        }
                    </td>
                </tr>
            }
            </tbody>
        }
    </table>
</div>


@code {
    private IEnumerable<WorkspaceViewModel>? _workspaces;
    private IEnumerable<PublicWorkspaceViewModel>? _publicWorkspaces;
    
    private readonly RequestCollectionsHelper _requestCollectionsHelper = new();
    private readonly RequestCollectionsHelper _requestCollectionsHelperForPublicWorkspaces = new ();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _requestCollectionsHelper.OnSet += RequestWorkspaces;
                _requestCollectionsHelperForPublicWorkspaces.OnSet += RequestPublicWorkspaces;
                
                await (await Linker.RequestBuilder
                        .RequestToAction("GetAll", "Workspaces")
                        .WithMethod(HttpMethod.Get)
                        .WithCookies()
                        .Fetch())
                    .LoadCookies()
                    .OnSuccess(response =>
                    {
                        _workspaces = JsonSerializer.Deserialize<List<WorkspaceViewModel>>(response.Content);
                        StateHasChanged();
                    })
                    .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                    {
                        Linker.NavigateToAction("Users.Login");
                    })
                    .OnUnhandled(response =>
                    {
                        Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                    })
                    .WaitForHandleFinishedAsync();
                
                await (await Linker.RequestBuilder
                        .RequestToAction("GetAllWorkspaces", "Public")
                        .WithMethod(HttpMethod.Get)
                        .WithCookies()
                        .Fetch())
                    .LoadCookies()
                    .OnSuccess(response =>
                    {
                        _publicWorkspaces = JsonSerializer.Deserialize<List<PublicWorkspaceViewModel>>(response.Content);
                        StateHasChanged();
                    })
                    .OnUnhandled(response =>
                    {
                        Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                    })
                    .WaitForHandleFinishedAsync();
            }
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
    
    private async void RequestWorkspaces(string query)
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToUrl($"{Linker.GetPathByAction("GetAll", "Workspaces")}?{query}")
                    .WithMethod(HttpMethod.Get)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(response =>
                {
                    _workspaces = JsonSerializer.Deserialize<List<WorkspaceViewModel>>(response.Content);
                    StateHasChanged();
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }

    private async void RequestPublicWorkspaces(string query)
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToUrl($"{Linker.GetPathByAction("GetAllWorkspaces", "Public")}?{query}")
                    .WithMethod(HttpMethod.Get)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(response =>
                {
                    _publicWorkspaces = JsonSerializer.Deserialize<List<PublicWorkspaceViewModel>>(response.Content);
                    StateHasChanged();
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }

    private async void Follow(Guid workspaceId)
    {
        await (await Linker.RequestBuilder
                .RequestToAction("Add", "Followers", new {workspaceId})
                .WithMethod(HttpMethod.Post)
                .WithCookies()
                .Fetch())
            .LoadCookies()
            .OnSuccess(_ =>
            {
                Linker.NavigationManager.Refresh(true);
            })
            .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
            {
                Linker.NavigateToAction("Users.Login");
            })
            .OnUnhandled(response =>
            {
                Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
            })
            .WaitForHandleFinishedAsync();
    }
}