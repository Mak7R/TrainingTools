@page "/workspaces/{WorkspaceId:guid}"

@rendermode InteractiveServer

@inject Linker Linker

<PageTitle>Workspace @if(_workspace != null) { <text>: @_workspace.Name</text> }</PageTitle>

<div class="container-fluid">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.Workspaces", "Blazor")">Workspaces</a></li>
        <li class="breadcrumb-item active" aria-current="page">@WorkspaceId</li>
        <li class="breadcrumb-item"><a href="@Linker.GetLocalPathByAction("Workspaces.Workspace", "Blazor", new {WorkspaceId})">Info</a></li>
    </ol>
</div>

<div class="container-fluid">
    <SearchBar FilterByOptions="ExercisesViewCollectionBuilder.FilterByOptions" RequestCollectionsHelper="_requestCollectionsHelper"/>
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th class="col-4">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(ExerciseViewModel.Id)" Display="Id" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("ASCENDING", StaticHtml.OrderIcons.ArrowUp), ("DESCENDING", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-4">
                <OrderComponent RequestCollectionsHelper="_requestCollectionsHelper" Value="@nameof(ExerciseViewModel.Name)" Display="Name" Options="@(new List<(string OptionName, string OptionHtmlView)> { ("", StaticHtml.OrderIcons.None), ("A-Z", StaticHtml.OrderIcons.ArrowUp), ("Z-A", StaticHtml.OrderIcons.ArrowDown) })"/>
            </th>
            <th class="col-2">
                Actions
            </th>
        </tr>
        </thead>
    </table>
    
    @if (_workspace == null)
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <div class="accordion mb-2" id="exercises-by-groups">
            @{
                var groups = _workspace.Groups.ToList();
                groups.Add(
                    new GroupViewModel()
                        { 
                            Id = Guid.Empty,
                            Name = "No Group",
                            Workspace = new WorkspaceViewModel
                            {
                                Id = _workspace.Id,
                                Name = _workspace.Name,
                                Owner = _workspace.Owner
                            } }
                        );
                _workspace.Groups = groups;
            }
            @foreach (var group in _workspace.Groups)
            {
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button
                            class="accordion-button p-2" type="button" data-bs-toggle="collapse"
                            data-bs-target="#panelsStayOpen-@group.Id" aria-expanded="true"
                            aria-controls="panelsStayOpen-@group.Id">
                            @group.Name
                        </button>
                    </h2>
                    <div id="panelsStayOpen-@group.Id" class="accordion-collapse collapse show">
                        <div class="accordion-body p-1">
                            <table class="table table-striped table-hover">
                                <tbody>
                                @{
                                    var exercises = group.Id == Guid.Empty ? 
                                        _workspace.Exercises.Where(e => e.Group == null) : 
                                        _workspace.Exercises.Where(e => e.Group?.Id == group.Id);
                                }
                                @foreach (var exercise in exercises)
                                {
                                    <tr>
                                        <td class="col-4">
                                            @exercise.Id
                                        </td>
                                        <td class="col-4">
                                            <a href="@Linker.GetLocalPathByAction("Exercises.Exercise", "Blazor", new {ExerciseId  = exercise.Id})">@exercise.Name</a>
                                        </td>
                                        <td class="col-2">
                                            <a href="@Linker.GetLocalPathByAction("Exercises.EditExercise", "Blazor", new {ExerciseId  = exercise.Id})" class="btn btn-primary">Edit</a>
                                            @{ var componentId = Guid.NewGuid(); }
                                            <DeleteButtonComponent ComponentId="componentId"/>
                                            <DeleteModalComponent
                                                ComponentId="@componentId"
                                                ModalTitle=@($"Delete exercise ({exercise.Name})")
                                                OnSuccessRedirectUrl="@Linker.GetLocalPathByAction("Exercises.Exercises", "Blazor", new {WorkspaceId})"
                                                HandlerUrl="@Linker.GetPathByAction("Delete", "Exercises", new {exerciseId = exercise.Id})"/>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>

        <a href="@Linker.GetLocalPathByAction("Exercises.AddExercise", "Blazor", new {WorkspaceId})" class="btn btn-success btn-block w-100 mb-2">Add Exercise</a>
        <a href="@Linker.GetLocalPathByAction("Groups.AddGroup", "Blazor", new {WorkspaceId})" class="btn btn-success btn-block w-100">Add Group</a> 
    }
</div>

@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private FullWorkspaceViewModel? _workspace;
    private readonly RequestCollectionsHelper _requestCollectionsHelper = new();
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _requestCollectionsHelper.OnSet += RequestWorkspace;
                await (await Linker.RequestBuilder
                        .RequestToAction("GetFull", "Workspaces", new { workspaceId = WorkspaceId })
                        .WithMethod(HttpMethod.Get)
                        .WithCookies()
                        .Fetch())
                    .LoadCookies()
                    .OnSuccess(response =>
                    {
                        _workspace = JsonSerializer.Deserialize<FullWorkspaceViewModel>(response.Content);
                        StateHasChanged();
                    })
                    .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                    {
                        Linker.NavigateToAction("Users.Login");
                    })
                    .OnUnhandled(response =>
                    {
                        Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                    })
                    .WaitForHandleFinishedAsync();
            }
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
    
    private async void RequestWorkspace(string query)
    {
        try
        {
            await (await Linker.RequestBuilder
                    .RequestToUrl($"{Linker.GetPathByAction("GetFull", "Workspaces", new { workspaceId = WorkspaceId })}?{query}")
                    .RequestToAction("Edit", "Users")
                    .WithMethod(HttpMethod.Get)
                    .WithCookies()
                    .Fetch())
                .LoadCookies()
                .OnSuccess(response =>
                {
                    _workspace = JsonSerializer.Deserialize<FullWorkspaceViewModel>(response.Content);
                    StateHasChanged();
                })
                .OnStatusCode(StatusCodes.Status401Unauthorized, _ =>
                {
                    Linker.NavigateToAction("Users.Login");
                })
                .OnUnhandled(response =>
                {
                    Linker.NavigateToAction("Error", routeValues: new { response.StatusCode });
                })
                .WaitForHandleFinishedAsync();
        }
        catch (Exception e)
        {
            Linker.NavigateToAction("Error", routeValues: new {StatusCode = 0, e.Message});
        }
    }
}