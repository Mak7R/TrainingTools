@using Contracts.Services

@inject IHttpContextAccessor HttpContextAccessor
@inject ICookiesSession CookiesSession
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="/styles/styles.css"/>
    <link rel="icon" type="image/png" href="favicon.png"/>
    <HeadOutlet/>
    <title>Trainig Tools</title>
</head>

<body>
    <Routes/>
    <script src="/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/js/main.lib.js"></script>
    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@code
{
    public bool IsAuthorized { get; private set; } = false;
    protected override void OnInitialized()
    {
        if (HttpContextAccessor.HttpContext == null) return;
        IsAuthorized = CookiesSession.GetAuthentication(HttpContextAccessor.HttpContext, out _);
        // can create scoped server but it works only for static rendered components
    }
}
