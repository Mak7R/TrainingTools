@rendermode InteractiveServer

@inject IFetchService FetchService
@inject ICookiesProvider CookiesProvider
@inject NavigationManager NavigationManager

<button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal-@_componentId">
    @ButtonName
</button>

<div class="modal fade" id="deleteModal-@_componentId" tabindex="-1" aria-labelledby="deleteLabel-@_componentId" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-4 text-danger" id="deleteLabel-@_componentId">@ModalTitle</h1>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="passwordForDelete-@_componentId">Password: </label>
                    <input id="passwordForDelete-@_componentId" @bind="_deleteModel.Password" type="password" class="form-control" required>
                    <InvalidModelFormMessage BindingError="BindingError" ErrorParameter="@nameof(DeleteModel.Password)" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                <button @onclick="OnDeleteClick" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

@code
{
    private Guid _componentId = Guid.NewGuid();
    [Parameter] public string ButtonName { get; set; } = "Delete";
    [Parameter] public string ModalTitle { get; set; } = "Delete";
    [Parameter] public string HandlerUrl { get; set; }
    [Parameter] public string OnSuccessRedirectUrl { get; set; } = "/";

    private DeleteModel _deleteModel = new()
    {
        Password = string.Empty
    };
    private ModelStateErrorViewModel? BindingError { get; set; }
    
    private async Task OnDeleteClick()
    {
        try
        {
            var request = new HttpRequest(
                HandlerUrl,
                "DELETE",
                JsonSerializer.Serialize(_deleteModel));

            await CookiesProvider.ToRequest(request);
            var response = await FetchService.Fetch(request);
            await CookiesProvider.FromResponse(response);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo(OnSuccessRedirectUrl, true);
            }
            else if (response.StatusCode == StatusCodes.Status400BadRequest)
            {
                BindingError = JsonSerializer.Deserialize<ModelStateErrorViewModel>(response.Content);
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo($"/error/{response.StatusCode}");
            }
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/error/600/{e.Message}");
        }
    }
}